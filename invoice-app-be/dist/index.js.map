{"version":3,"sources":["../src/models/invoices.ts","../src/db_config.ts","../src/models/product_solds.ts","../src/models/db_index.ts","../src/index.ts"],"sourcesContent":["import { DataTypes } from \"sequelize\";\r\nimport { sequelize } from \"../db_config\"\r\n\r\n// model invoices\r\nconst Invoice = sequelize.define(\"Invoice\", {\r\n    invoice_no: {\r\n        type: DataTypes.INTEGER,\r\n        autoIncrement: true,\r\n        primaryKey: true,\r\n    },\r\n    date: {\r\n        type: DataTypes.DATE,\r\n        allowNull: false,\r\n    },\r\n    customer: {\r\n        type: DataTypes.TEXT,\r\n        allowNull: false,\r\n    },\r\n    salesperson: {\r\n        type: DataTypes.TEXT,\r\n        allowNull: false,\r\n    },\r\n    payment_type: {\r\n        type: DataTypes.ENUM(\"CASH\", \"CREDIT\", \"NOTCASHORCREDIT\"),\r\n        allowNull: false,\r\n    },\r\n    notes: {\r\n        type: DataTypes.TEXT,\r\n        allowNull: true,\r\n    },\r\n}, {\r\n    tableName: \"invoices\"\r\n});\r\n\r\nexport default Invoice","import { Sequelize } from \"sequelize\";\r\nimport * as path from \"path\"\r\n\r\n// Export Config\r\nexport const sequelize = new Sequelize({\r\n    dialect: \"sqlite\",\r\n    storage: path.resolve(\"database.sqlite\"),\r\n    logging: false,\r\n});\r\n  ","import { DataTypes } from \"sequelize\";\r\nimport { sequelize } from \"../db_config\"\r\n\r\nconst ProductSold = sequelize.define(\"ProductSold\", {\r\n    invoice_no: {\r\n        type: DataTypes.INTEGER,\r\n        allowNull: false\r\n    },\r\n    item: {\r\n        type: DataTypes.TEXT,\r\n        allowNull: false,\r\n    },\r\n    quantity: {\r\n        type: DataTypes.INTEGER,\r\n        allowNull: false,\r\n    },\r\n    total_cogs: {\r\n        type: DataTypes.INTEGER,\r\n        allowNull: false,\r\n    },\r\n    total_price: {\r\n        type: DataTypes.INTEGER,\r\n        allowNull: false,\r\n    }\r\n}, {\r\n    tableName: \"product_solds\"\r\n});\r\n\r\nexport default ProductSold","import Invoice from \"./invoices\";\r\nimport ProductSold from \"./product_solds\";\r\nimport { sequelize } from \"../db_config\";\r\n\r\n// Relation\r\nInvoice.hasMany(ProductSold, { foreignKey: \"invoice_no\", onDelete: \"CASCADE\" });\r\nProductSold.belongsTo(Invoice, { foreignKey: \"invoice_no\" });\r\n\r\nasync function initDB(): Promise<void> {\r\n    try {\r\n        await sequelize.authenticate();\r\n        console.log(\"Database OK!\");\r\n    \r\n        // sync schema\r\n        await sequelize.sync({ force: false });\r\n        console.log(\"Database initialized with Sequelize schema\");\r\n    } catch (err) {\r\n        console.error(\"Error initializing DB:\", err);\r\n        throw new Error(\"Initialize Error!\")\r\n    }\r\n}\r\n  \r\nexport {\r\n    initDB,\r\n    Invoice,\r\n    ProductSold\r\n}","import * as express from \"express\"\r\nimport { initDB } from \"./models/db_index\"\r\n\r\nasync function main() {\r\n    // Initialize DB\r\n    await initDB()\r\n}\r\n\r\nmain()"],"mappings":";AAAA,SAAS,iBAAiB;;;ACA1B,SAAS,iBAAiB;AAC1B,YAAY,UAAU;AAGf,IAAM,YAAY,IAAI,UAAU;AAAA,EACnC,SAAS;AAAA,EACT,SAAc,aAAQ,iBAAiB;AAAA,EACvC,SAAS;AACb,CAAC;;;ADJD,IAAM,UAAU,UAAU,OAAO,WAAW;AAAA,EACxC,YAAY;AAAA,IACR,MAAM,UAAU;AAAA,IAChB,eAAe;AAAA,IACf,YAAY;AAAA,EAChB;AAAA,EACA,MAAM;AAAA,IACF,MAAM,UAAU;AAAA,IAChB,WAAW;AAAA,EACf;AAAA,EACA,UAAU;AAAA,IACN,MAAM,UAAU;AAAA,IAChB,WAAW;AAAA,EACf;AAAA,EACA,aAAa;AAAA,IACT,MAAM,UAAU;AAAA,IAChB,WAAW;AAAA,EACf;AAAA,EACA,cAAc;AAAA,IACV,MAAM,UAAU,KAAK,QAAQ,UAAU,iBAAiB;AAAA,IACxD,WAAW;AAAA,EACf;AAAA,EACA,OAAO;AAAA,IACH,MAAM,UAAU;AAAA,IAChB,WAAW;AAAA,EACf;AACJ,GAAG;AAAA,EACC,WAAW;AACf,CAAC;AAED,IAAO,mBAAQ;;;AElCf,SAAS,aAAAA,kBAAiB;AAG1B,IAAM,cAAc,UAAU,OAAO,eAAe;AAAA,EAChD,YAAY;AAAA,IACR,MAAMC,WAAU;AAAA,IAChB,WAAW;AAAA,EACf;AAAA,EACA,MAAM;AAAA,IACF,MAAMA,WAAU;AAAA,IAChB,WAAW;AAAA,EACf;AAAA,EACA,UAAU;AAAA,IACN,MAAMA,WAAU;AAAA,IAChB,WAAW;AAAA,EACf;AAAA,EACA,YAAY;AAAA,IACR,MAAMA,WAAU;AAAA,IAChB,WAAW;AAAA,EACf;AAAA,EACA,aAAa;AAAA,IACT,MAAMA,WAAU;AAAA,IAChB,WAAW;AAAA,EACf;AACJ,GAAG;AAAA,EACC,WAAW;AACf,CAAC;AAED,IAAO,wBAAQ;;;ACvBf,iBAAQ,QAAQ,uBAAa,EAAE,YAAY,cAAc,UAAU,UAAU,CAAC;AAC9E,sBAAY,UAAU,kBAAS,EAAE,YAAY,aAAa,CAAC;AAE3D,eAAe,SAAwB;AACnC,MAAI;AACA,UAAM,UAAU,aAAa;AAC7B,YAAQ,IAAI,cAAc;AAG1B,UAAM,UAAU,KAAK,EAAE,OAAO,MAAM,CAAC;AACrC,YAAQ,IAAI,4CAA4C;AAAA,EAC5D,SAAS,KAAK;AACV,YAAQ,MAAM,0BAA0B,GAAG;AAC3C,UAAM,IAAI,MAAM,mBAAmB;AAAA,EACvC;AACJ;;;ACjBA,eAAe,OAAO;AAElB,QAAM,OAAO;AACjB;AAEA,KAAK;","names":["DataTypes","DataTypes"]}